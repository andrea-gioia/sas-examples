// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: v04-meta-data-physical-vocabulary.proto
// Protobuf Java Version: 4.29.3

package vcb.mdp;

public final class V04MetaDataPhysicalVocabulary {
  private V04MetaDataPhysicalVocabulary() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      V04MetaDataPhysicalVocabulary.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(vcb.mdp.V04MetaDataPhysicalVocabulary.sk);
    registry.add(vcb.mdp.V04MetaDataPhysicalVocabulary.mk);
    registry.add(vcb.mdp.V04MetaDataPhysicalVocabulary.fk);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface PhysicalMetadataVocabularyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:vcb.mdp.PhysicalMetadataVocabulary)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Keywords applicable to all model elements (starting from x0000)
     * </pre>
     *
     * <code>optional string physicalName = 40000;</code>
     * @return Whether the physicalName field is set.
     */
    boolean hasPhysicalName();
    /**
     * <pre>
     * Keywords applicable to all model elements (starting from x0000)
     * </pre>
     *
     * <code>optional string physicalName = 40000;</code>
     * @return The physicalName.
     */
    java.lang.String getPhysicalName();
    /**
     * <pre>
     * Keywords applicable to all model elements (starting from x0000)
     * </pre>
     *
     * <code>optional string physicalName = 40000;</code>
     * @return The bytes for physicalName.
     */
    com.google.protobuf.ByteString
        getPhysicalNameBytes();

    /**
     * <code>optional string physicalType = 40001;</code>
     * @return Whether the physicalType field is set.
     */
    boolean hasPhysicalType();
    /**
     * <code>optional string physicalType = 40001;</code>
     * @return The physicalType.
     */
    java.lang.String getPhysicalType();
    /**
     * <code>optional string physicalType = 40001;</code>
     * @return The bytes for physicalType.
     */
    com.google.protobuf.ByteString
        getPhysicalTypeBytes();

    /**
     * <pre>
     * Keywords applicable only to properties (starting from x6000 )
     * add properties specific keywords here 
     * </pre>
     *
     * <code>optional bool partitionKey = 46000 [targets = TARGET_TYPE_FIELD];</code>
     * @return Whether the partitionKey field is set.
     */
    boolean hasPartitionKey();
    /**
     * <pre>
     * Keywords applicable only to properties (starting from x6000 )
     * add properties specific keywords here 
     * </pre>
     *
     * <code>optional bool partitionKey = 46000 [targets = TARGET_TYPE_FIELD];</code>
     * @return The partitionKey.
     */
    boolean getPartitionKey();

    /**
     * <code>optional int32 partitionKeyPosition = 46001 [targets = TARGET_TYPE_FIELD];</code>
     * @return Whether the partitionKeyPosition field is set.
     */
    boolean hasPartitionKeyPosition();
    /**
     * <code>optional int32 partitionKeyPosition = 46001 [targets = TARGET_TYPE_FIELD];</code>
     * @return The partitionKeyPosition.
     */
    int getPartitionKeyPosition();
  }
  /**
   * <pre>
   * *
   * Physical Meta-Data Annotations Vocabulary
   * (Version 1.0.0-DRAFT)
   *
   * The Physical Metadata Annotation Vocabulary, defined as an extension of the SAS, provides commonly used metadata for 
   * annotating schemas at a physical level. Sometime is necessary to enable the consumption of data from the underlying 
   * datastore to expose these information. If this is not the case this information SHOULD not be exposed in order to hide 
   * to the consumer internal implementation details
   *
   * Vocabulary url: 
   * - https://dpds.opendatamesh.org/specifications/sas/1.0.0-DRAFT/vocab/meta-data-physical
   *
   * Authors: 
   * - Andrea Gioia
   *
   * LICENCE: 
   * - Apache License Version 2.0 (https://github.com/opendatamesh-initiative/odm-specification-schema-annotations/blob/main/LICENSE)
   * </pre>
   *
   * Protobuf type {@code vcb.mdp.PhysicalMetadataVocabulary}
   */
  public static final class PhysicalMetadataVocabulary extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:vcb.mdp.PhysicalMetadataVocabulary)
      PhysicalMetadataVocabularyOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        PhysicalMetadataVocabulary.class.getName());
    }
    // Use PhysicalMetadataVocabulary.newBuilder() to construct.
    private PhysicalMetadataVocabulary(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private PhysicalMetadataVocabulary() {
      physicalName_ = "";
      physicalType_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vcb.mdp.V04MetaDataPhysicalVocabulary.internal_static_vcb_mdp_PhysicalMetadataVocabulary_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vcb.mdp.V04MetaDataPhysicalVocabulary.internal_static_vcb_mdp_PhysicalMetadataVocabulary_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary.class, vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary.Builder.class);
    }

    private int bitField0_;
    public static final int PHYSICALNAME_FIELD_NUMBER = 40000;
    @SuppressWarnings("serial")
    private volatile java.lang.Object physicalName_ = "";
    /**
     * <pre>
     * Keywords applicable to all model elements (starting from x0000)
     * </pre>
     *
     * <code>optional string physicalName = 40000;</code>
     * @return Whether the physicalName field is set.
     */
    @java.lang.Override
    public boolean hasPhysicalName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Keywords applicable to all model elements (starting from x0000)
     * </pre>
     *
     * <code>optional string physicalName = 40000;</code>
     * @return The physicalName.
     */
    @java.lang.Override
    public java.lang.String getPhysicalName() {
      java.lang.Object ref = physicalName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        physicalName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Keywords applicable to all model elements (starting from x0000)
     * </pre>
     *
     * <code>optional string physicalName = 40000;</code>
     * @return The bytes for physicalName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPhysicalNameBytes() {
      java.lang.Object ref = physicalName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        physicalName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PHYSICALTYPE_FIELD_NUMBER = 40001;
    @SuppressWarnings("serial")
    private volatile java.lang.Object physicalType_ = "";
    /**
     * <code>optional string physicalType = 40001;</code>
     * @return Whether the physicalType field is set.
     */
    @java.lang.Override
    public boolean hasPhysicalType() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional string physicalType = 40001;</code>
     * @return The physicalType.
     */
    @java.lang.Override
    public java.lang.String getPhysicalType() {
      java.lang.Object ref = physicalType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        physicalType_ = s;
        return s;
      }
    }
    /**
     * <code>optional string physicalType = 40001;</code>
     * @return The bytes for physicalType.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPhysicalTypeBytes() {
      java.lang.Object ref = physicalType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        physicalType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PARTITIONKEY_FIELD_NUMBER = 46000;
    private boolean partitionKey_ = false;
    /**
     * <pre>
     * Keywords applicable only to properties (starting from x6000 )
     * add properties specific keywords here 
     * </pre>
     *
     * <code>optional bool partitionKey = 46000 [targets = TARGET_TYPE_FIELD];</code>
     * @return Whether the partitionKey field is set.
     */
    @java.lang.Override
    public boolean hasPartitionKey() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Keywords applicable only to properties (starting from x6000 )
     * add properties specific keywords here 
     * </pre>
     *
     * <code>optional bool partitionKey = 46000 [targets = TARGET_TYPE_FIELD];</code>
     * @return The partitionKey.
     */
    @java.lang.Override
    public boolean getPartitionKey() {
      return partitionKey_;
    }

    public static final int PARTITIONKEYPOSITION_FIELD_NUMBER = 46001;
    private int partitionKeyPosition_ = 0;
    /**
     * <code>optional int32 partitionKeyPosition = 46001 [targets = TARGET_TYPE_FIELD];</code>
     * @return Whether the partitionKeyPosition field is set.
     */
    @java.lang.Override
    public boolean hasPartitionKeyPosition() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional int32 partitionKeyPosition = 46001 [targets = TARGET_TYPE_FIELD];</code>
     * @return The partitionKeyPosition.
     */
    @java.lang.Override
    public int getPartitionKeyPosition() {
      return partitionKeyPosition_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 40000, physicalName_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 40001, physicalType_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(46000, partitionKey_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt32(46001, partitionKeyPosition_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(40000, physicalName_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(40001, physicalType_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(46000, partitionKey_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(46001, partitionKeyPosition_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary)) {
        return super.equals(obj);
      }
      vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary other = (vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary) obj;

      if (hasPhysicalName() != other.hasPhysicalName()) return false;
      if (hasPhysicalName()) {
        if (!getPhysicalName()
            .equals(other.getPhysicalName())) return false;
      }
      if (hasPhysicalType() != other.hasPhysicalType()) return false;
      if (hasPhysicalType()) {
        if (!getPhysicalType()
            .equals(other.getPhysicalType())) return false;
      }
      if (hasPartitionKey() != other.hasPartitionKey()) return false;
      if (hasPartitionKey()) {
        if (getPartitionKey()
            != other.getPartitionKey()) return false;
      }
      if (hasPartitionKeyPosition() != other.hasPartitionKeyPosition()) return false;
      if (hasPartitionKeyPosition()) {
        if (getPartitionKeyPosition()
            != other.getPartitionKeyPosition()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPhysicalName()) {
        hash = (37 * hash) + PHYSICALNAME_FIELD_NUMBER;
        hash = (53 * hash) + getPhysicalName().hashCode();
      }
      if (hasPhysicalType()) {
        hash = (37 * hash) + PHYSICALTYPE_FIELD_NUMBER;
        hash = (53 * hash) + getPhysicalType().hashCode();
      }
      if (hasPartitionKey()) {
        hash = (37 * hash) + PARTITIONKEY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getPartitionKey());
      }
      if (hasPartitionKeyPosition()) {
        hash = (37 * hash) + PARTITIONKEYPOSITION_FIELD_NUMBER;
        hash = (53 * hash) + getPartitionKeyPosition();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * *
     * Physical Meta-Data Annotations Vocabulary
     * (Version 1.0.0-DRAFT)
     *
     * The Physical Metadata Annotation Vocabulary, defined as an extension of the SAS, provides commonly used metadata for 
     * annotating schemas at a physical level. Sometime is necessary to enable the consumption of data from the underlying 
     * datastore to expose these information. If this is not the case this information SHOULD not be exposed in order to hide 
     * to the consumer internal implementation details
     *
     * Vocabulary url: 
     * - https://dpds.opendatamesh.org/specifications/sas/1.0.0-DRAFT/vocab/meta-data-physical
     *
     * Authors: 
     * - Andrea Gioia
     *
     * LICENCE: 
     * - Apache License Version 2.0 (https://github.com/opendatamesh-initiative/odm-specification-schema-annotations/blob/main/LICENSE)
     * </pre>
     *
     * Protobuf type {@code vcb.mdp.PhysicalMetadataVocabulary}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:vcb.mdp.PhysicalMetadataVocabulary)
        vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabularyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vcb.mdp.V04MetaDataPhysicalVocabulary.internal_static_vcb_mdp_PhysicalMetadataVocabulary_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vcb.mdp.V04MetaDataPhysicalVocabulary.internal_static_vcb_mdp_PhysicalMetadataVocabulary_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary.class, vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary.Builder.class);
      }

      // Construct using vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        physicalName_ = "";
        physicalType_ = "";
        partitionKey_ = false;
        partitionKeyPosition_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vcb.mdp.V04MetaDataPhysicalVocabulary.internal_static_vcb_mdp_PhysicalMetadataVocabulary_descriptor;
      }

      @java.lang.Override
      public vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary getDefaultInstanceForType() {
        return vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary.getDefaultInstance();
      }

      @java.lang.Override
      public vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary build() {
        vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary buildPartial() {
        vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary result = new vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.physicalName_ = physicalName_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.physicalType_ = physicalType_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.partitionKey_ = partitionKey_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.partitionKeyPosition_ = partitionKeyPosition_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary) {
          return mergeFrom((vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary other) {
        if (other == vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary.getDefaultInstance()) return this;
        if (other.hasPhysicalName()) {
          physicalName_ = other.physicalName_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasPhysicalType()) {
          physicalType_ = other.physicalType_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasPartitionKey()) {
          setPartitionKey(other.getPartitionKey());
        }
        if (other.hasPartitionKeyPosition()) {
          setPartitionKeyPosition(other.getPartitionKeyPosition());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 320002: {
                physicalName_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 320002
              case 320010: {
                physicalType_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 320010
              case 368000: {
                partitionKey_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 368000
              case 368008: {
                partitionKeyPosition_ = input.readInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 368008
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object physicalName_ = "";
      /**
       * <pre>
       * Keywords applicable to all model elements (starting from x0000)
       * </pre>
       *
       * <code>optional string physicalName = 40000;</code>
       * @return Whether the physicalName field is set.
       */
      public boolean hasPhysicalName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Keywords applicable to all model elements (starting from x0000)
       * </pre>
       *
       * <code>optional string physicalName = 40000;</code>
       * @return The physicalName.
       */
      public java.lang.String getPhysicalName() {
        java.lang.Object ref = physicalName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          physicalName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Keywords applicable to all model elements (starting from x0000)
       * </pre>
       *
       * <code>optional string physicalName = 40000;</code>
       * @return The bytes for physicalName.
       */
      public com.google.protobuf.ByteString
          getPhysicalNameBytes() {
        java.lang.Object ref = physicalName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          physicalName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Keywords applicable to all model elements (starting from x0000)
       * </pre>
       *
       * <code>optional string physicalName = 40000;</code>
       * @param value The physicalName to set.
       * @return This builder for chaining.
       */
      public Builder setPhysicalName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        physicalName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Keywords applicable to all model elements (starting from x0000)
       * </pre>
       *
       * <code>optional string physicalName = 40000;</code>
       * @return This builder for chaining.
       */
      public Builder clearPhysicalName() {
        physicalName_ = getDefaultInstance().getPhysicalName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Keywords applicable to all model elements (starting from x0000)
       * </pre>
       *
       * <code>optional string physicalName = 40000;</code>
       * @param value The bytes for physicalName to set.
       * @return This builder for chaining.
       */
      public Builder setPhysicalNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        physicalName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object physicalType_ = "";
      /**
       * <code>optional string physicalType = 40001;</code>
       * @return Whether the physicalType field is set.
       */
      public boolean hasPhysicalType() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional string physicalType = 40001;</code>
       * @return The physicalType.
       */
      public java.lang.String getPhysicalType() {
        java.lang.Object ref = physicalType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          physicalType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string physicalType = 40001;</code>
       * @return The bytes for physicalType.
       */
      public com.google.protobuf.ByteString
          getPhysicalTypeBytes() {
        java.lang.Object ref = physicalType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          physicalType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string physicalType = 40001;</code>
       * @param value The physicalType to set.
       * @return This builder for chaining.
       */
      public Builder setPhysicalType(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        physicalType_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional string physicalType = 40001;</code>
       * @return This builder for chaining.
       */
      public Builder clearPhysicalType() {
        physicalType_ = getDefaultInstance().getPhysicalType();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>optional string physicalType = 40001;</code>
       * @param value The bytes for physicalType to set.
       * @return This builder for chaining.
       */
      public Builder setPhysicalTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        physicalType_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private boolean partitionKey_ ;
      /**
       * <pre>
       * Keywords applicable only to properties (starting from x6000 )
       * add properties specific keywords here 
       * </pre>
       *
       * <code>optional bool partitionKey = 46000 [targets = TARGET_TYPE_FIELD];</code>
       * @return Whether the partitionKey field is set.
       */
      @java.lang.Override
      public boolean hasPartitionKey() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Keywords applicable only to properties (starting from x6000 )
       * add properties specific keywords here 
       * </pre>
       *
       * <code>optional bool partitionKey = 46000 [targets = TARGET_TYPE_FIELD];</code>
       * @return The partitionKey.
       */
      @java.lang.Override
      public boolean getPartitionKey() {
        return partitionKey_;
      }
      /**
       * <pre>
       * Keywords applicable only to properties (starting from x6000 )
       * add properties specific keywords here 
       * </pre>
       *
       * <code>optional bool partitionKey = 46000 [targets = TARGET_TYPE_FIELD];</code>
       * @param value The partitionKey to set.
       * @return This builder for chaining.
       */
      public Builder setPartitionKey(boolean value) {

        partitionKey_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Keywords applicable only to properties (starting from x6000 )
       * add properties specific keywords here 
       * </pre>
       *
       * <code>optional bool partitionKey = 46000 [targets = TARGET_TYPE_FIELD];</code>
       * @return This builder for chaining.
       */
      public Builder clearPartitionKey() {
        bitField0_ = (bitField0_ & ~0x00000004);
        partitionKey_ = false;
        onChanged();
        return this;
      }

      private int partitionKeyPosition_ ;
      /**
       * <code>optional int32 partitionKeyPosition = 46001 [targets = TARGET_TYPE_FIELD];</code>
       * @return Whether the partitionKeyPosition field is set.
       */
      @java.lang.Override
      public boolean hasPartitionKeyPosition() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional int32 partitionKeyPosition = 46001 [targets = TARGET_TYPE_FIELD];</code>
       * @return The partitionKeyPosition.
       */
      @java.lang.Override
      public int getPartitionKeyPosition() {
        return partitionKeyPosition_;
      }
      /**
       * <code>optional int32 partitionKeyPosition = 46001 [targets = TARGET_TYPE_FIELD];</code>
       * @param value The partitionKeyPosition to set.
       * @return This builder for chaining.
       */
      public Builder setPartitionKeyPosition(int value) {

        partitionKeyPosition_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 partitionKeyPosition = 46001 [targets = TARGET_TYPE_FIELD];</code>
       * @return This builder for chaining.
       */
      public Builder clearPartitionKeyPosition() {
        bitField0_ = (bitField0_ & ~0x00000008);
        partitionKeyPosition_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:vcb.mdp.PhysicalMetadataVocabulary)
    }

    // @@protoc_insertion_point(class_scope:vcb.mdp.PhysicalMetadataVocabulary)
    private static final vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary();
    }

    public static vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PhysicalMetadataVocabulary>
        PARSER = new com.google.protobuf.AbstractParser<PhysicalMetadataVocabulary>() {
      @java.lang.Override
      public PhysicalMetadataVocabulary parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<PhysicalMetadataVocabulary> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PhysicalMetadataVocabulary> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int SK_FIELD_NUMBER = 49997;
  /**
   * <code>extend .google.protobuf.FileOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FileOptions,
      vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary> sk = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary.class,
        vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary.getDefaultInstance());
  public static final int MK_FIELD_NUMBER = 49998;
  /**
   * <code>extend .google.protobuf.MessageOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.MessageOptions,
      vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary> mk = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary.class,
        vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary.getDefaultInstance());
  public static final int FK_FIELD_NUMBER = 49999;
  /**
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary> fk = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary.class,
        vcb.mdp.V04MetaDataPhysicalVocabulary.PhysicalMetadataVocabulary.getDefaultInstance());
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_vcb_mdp_PhysicalMetadataVocabulary_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_vcb_mdp_PhysicalMetadataVocabulary_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\'v04-meta-data-physical-vocabulary.prot" +
      "o\022\007vcb.mdp\032 google/protobuf/descriptor.p" +
      "roto\"\356\001\n\032PhysicalMetadataVocabulary\022\033\n\014p" +
      "hysicalName\030\300\270\002 \001(\tH\000\210\001\001\022\033\n\014physicalType" +
      "\030\301\270\002 \001(\tH\001\210\001\001\022 \n\014partitionKey\030\260\347\002 \001(\010B\003\230" +
      "\001\004H\002\210\001\001\022(\n\024partitionKeyPosition\030\261\347\002 \001(\005B" +
      "\003\230\001\004H\003\210\001\001B\017\n\r_physicalNameB\017\n\r_physicalT" +
      "ypeB\017\n\r_partitionKeyB\027\n\025_partitionKeyPos" +
      "ition:O\n\002sk\022\034.google.protobuf.FileOption" +
      "s\030\315\206\003 \001(\0132#.vcb.mdp.PhysicalMetadataVoca" +
      "bulary:R\n\002mk\022\037.google.protobuf.MessageOp" +
      "tions\030\316\206\003 \001(\0132#.vcb.mdp.PhysicalMetadata" +
      "Vocabulary:P\n\002fk\022\035.google.protobuf.Field" +
      "Options\030\317\206\003 \001(\0132#.vcb.mdp.PhysicalMetada" +
      "taVocabularyb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.DescriptorProtos.getDescriptor(),
        });
    internal_static_vcb_mdp_PhysicalMetadataVocabulary_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_vcb_mdp_PhysicalMetadataVocabulary_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_vcb_mdp_PhysicalMetadataVocabulary_descriptor,
        new java.lang.String[] { "PhysicalName", "PhysicalType", "PartitionKey", "PartitionKeyPosition", });
    sk.internalInit(descriptor.getExtensions().get(0));
    mk.internalInit(descriptor.getExtensions().get(1));
    fk.internalInit(descriptor.getExtensions().get(2));
    descriptor.resolveAllFeaturesImmutable();
    com.google.protobuf.DescriptorProtos.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
